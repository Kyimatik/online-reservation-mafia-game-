import json
import asyncio
import logging
import sys

from aiogram import Bot, Dispatcher, Router, types , F 
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart , Command
from aiogram.types import Message , CallbackQuery ,FSInputFile
from aiogram.utils.markdown import hbold
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup , InlineKeyboardMarkup , InlineKeyboardButton 
from aiogram.methods import SendMediaGroup
from aiogram.types import InputMediaPhoto
from states1 import Newmember 
import buttons
from states1 import Change 
TOKEN = "do not copy!"


# All handlers should be attached to the Router (or Dispatcher)
bot = Bot(TOKEN)
dp = Dispatcher()
router = Router()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞ [users.json]
def load_data():
    try:
        with open('users.json', 'r') as json_file:
            data = json.load(json_file)
    except FileNotFoundError:
        data = {}
    return data

def save_data(data):
    with open('users.json', 'w') as json_file:
        json.dump(data, json_file, indent=4)



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞ [afisha.json]
def load_data1():
    try:
        with open('afisha.json', 'r') as json_file:
            data = json.load(json_file)
    except FileNotFoundError:
        data = {'user_ids': [], 'length': 0}  # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å —Å –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    return data

def save_data1(data):
    with open('afisha.json', 'w') as json_file:
        json.dump(data, json_file, indent=4)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∞—Ñ–∏—à—É
def add_user_to_afisha(user_id):
    data = load_data1()
    if user_id not in data['user_ids']:
        data['user_ids'].append(user_id)  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        data['length'] = len(data['user_ids'])  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        save_data1(data)
        return True
    return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∞—Ñ–∏—à–∏
def remove_user_from_afisha(user_id):
    data = load_data1()
    if user_id in data['user_ids']:
        data['user_ids'].remove(user_id)  # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        data['length'] = len(data['user_ids'])  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        save_data1(data)
        return True
    return False



#CommandStart 

@dp.message(Command("start"))
async def start(message: Message):
    data1 = load_data()
    if str(message.from_user.id) in data1:
        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
    else:
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç <b>{message.from_user.first_name}</b> ! \n–ó–¥–µ—Å—å –∏–≥—Ä–∞—é—Ç –≤ –º–∞—Ñ–∏—é\n–ù–∞—à–∏ –∫–ª—É–±—ã –µ—Å—Ç—å –≤ —ç—Ç–∏—Ö –≥–æ—Ä–æ–¥–∞—Ö, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π",parse_mode="HTML",reply_markup=buttons.cities)
    
#–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–∞–≤–∏–ª–∞ 
@dp.message(Command("rules"))
async def pravila(message: Message):
    await message.answer("https://www.youtube.com/watch?v=AUhRHtx3Rbc&feature=youtu.be")

#–°–∞–º–∞ –∫–æ–º–∞–Ω–¥–∞ –∞—Ñ–∏—à–∏ , –≥–¥–µ –≤—ã–±–∏—Ä–∞–µ—à—å —Å–æ–±—ã—Ç–∏–µ 
@dp.message(Command("afisha"))
async def mainafisha(message: Message):
    usid = message.from_user.id
    data = load_data()
    if str(usid) in data:
        await message.answer(f"""<b>–ò–º—è</b> - <i>{data[str(usid)]['name']}</i> 
    –°–∞–º–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞—Ç—å! –í–æ—Ç —Å–ø–∏—Å–æ–∫ –∏–≥—Ä, –≤—ã–±–∏—Ä–∞–π, –∫–æ–≥–¥–∞ —É–¥–æ–±–Ω–æ, –∏ –∑–∞–ø–∏—Å—ã–≤–∞–π—Å—è!
    """,parse_mode="HTML",reply_markup=buttons.afishaoptions)
    else:
        await message.answer("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è , –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏ –∑–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –≤—Å–µ –Ω–∞—à–∏ –∏–≥—Ä—ã.")

#–°–∞–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ , —Å–∞–º–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Å–º–æ—Ç—Ä —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤!
@dp.callback_query(lambda callback_query: callback_query.data == "mainevent")
async def getin(callback: CallbackQuery, state: FSMContext):
    zap = buttons.generate_keyboard()
    photo_id = "AgACAgIAAxkBAAIBYWYSmVuq-U5NhUhKAtO-aG1bMDnCAAKl2TEbi1-RSFdyua2d9NHGAQADAgADeQADNAQ"
    await callback.message.answer_photo(photo_id,"""–î—Ä—É–∑—å—è! ‚ù§Ô∏è‚Äçüî•

–í –°—Ä–µ–¥—É 10.04 –∏–≥—Ä–∞–µ–º –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ  One Lounge | Restaurant

–ê–¥—Ä–µ—Å: 5648 International Dr

(–í—Å–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –º–æ–∂–Ω–æ –∑–∞–¥–∞–≤–∞—Ç—å –≤ –Ω–∞—à–µ–º –º–∞—Ñ–∏–æ–∑–Ω–æ–º —á–∞—Ç–µ: https://t.me/Mafia_Orlando_Game

 –ù–∞—á–∞–ª–æ –≤ 07.00 ‚úîÔ∏è

 –°—Ç–æ–∏–º–æ—Å—Ç—å: 35$ —Å —á–µ–ª–æ–≤–µ–∫–∞ –∑–∞ –≤–µ—Å—å –≤–µ—á–µ—Ä –∏–≥—Ä‚úÖ
""",reply_markup=zap)
    

#callback –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.callback_query(lambda callback_query: callback_query.data == "getin")
async def getin(callback: CallbackQuery, state: FSMContext):
    final_num1 = 20
    data = load_data1()
    if callback.from_user.id in data["user_ids"]:
        await callback.message.answer("–í—ã —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏!")
    elif callback.from_user.id not in data["user_ids"] and data["length"]<final_num1:
        add_user_to_afisha(callback.from_user.id)
        await callback.message.answer("–í—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ —Å–ª–æ—Ç, –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!")
    else:
        await callback.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ –Ω–æ –≤—Å–µ —Å–ª–æ—Ç—ã —É–∂–µ –∑–∞–Ω—è—Ç—ã , –Ω–∞–º –±–µ–∑—É–º–Ω–æ –∂–∞–ª—å!")

@dp.callback_query(lambda callback_query: callback_query.data == "allplayers")
async def allplayers(callback: CallbackQuery, state: FSMContext): 
    media_group = []
    afisha_data = load_data1()  # –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞ afisha.json
    users_data = load_data()  # –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞ users.json
    user_counter = 1
    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π
    message_text = ""

    # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π –∫ —Ç–µ–∫—Å—Ç—É
    for user_id in afisha_data['user_ids']:
        user_info = users_data.get(str(user_id))  # –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ users.json
        
        if user_info:
            name = user_info.get('name', '')
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –ø–µ—Ä–µ–¥ –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Ç–µ–∫—Å—Ç—É
            message_text += f"{user_counter}. {name}\n"
            user_counter += 1
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π –∏ –∏–º–µ–Ω–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await callback.message.answer(message_text)

        
    # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for user_id in afisha_data['user_ids']:
        user_info = users_data.get(str(user_id))  # –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ users.json
        
        if user_info:
            avatar_id = user_info.get('avatar_id', '')
            if avatar_id:
                media_group.append(InputMediaPhoto(media=avatar_id))
    
    if media_group:
        await bot.send_media_group(chat_id=callback.from_user.id,media=media_group)
                



# –£–±—Ä–∞—Ç—å –±—Ä–æ–Ω—å–∫—É GETOFF
@dp.callback_query(lambda callback_query: callback_query.data == "getoff")
async def getoff(callback: CallbackQuery, state: FSMContext):
    data = load_data1()
    if callback.from_user.id not in data["user_ids"]:
        await callback.message.answer("–í—ã –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ —Å–ª–æ—Ç. –°–∞–º–æ–µ –≤—Ä–µ–º—è –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å!")
    elif callback.from_user.id in data["user_ids"]:
        remove_user_from_afisha(callback.from_user.id)
        await callback.message.answer("–í—ã —É–±—Ä–∞–ª–∏ —Å–ª–æ—Ç!")
        


#await bot.send_photo(chat_id=callback.from_user.id, photo=avatar_id)
    


# –ö–æ–º–∞–Ω–¥–∞ /–ø—Ä–æ—Ñ–∏–ª—å 
@dp.message(Command("profile"))
async def start(message: Message):
    data1 = load_data()
    await message.answer("–ú–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∑–¥–µ—Å—å")
    await message.answer_photo(data1[str(message.from_user.id)]["avatar_id" ])
    await message.answer(f"""–ü—Ä–æ—Ñ–∏–ª—å

<b>–ò–º—è</b>: {data1[str(message.from_user.id)]["name"]}
<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>: {data1[str(message.from_user.id)]["phone_number"]}
""",parse_mode="HTML")
    await message.answer("–í—Å–µ –≤–µ—Ä–Ω–æ?",reply_markup=buttons.vseverno)


#callbacks PROFILE NET NET NET NET NET NET NET NET NET NET NET NET NET 
@dp.callback_query(lambda callback_query: callback_query.data == "net")
async def no(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–û–∫, —á—Ç–æ –±—É–¥–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?",reply_markup=buttons.options)
#Callback Name 
@dp.callback_query(lambda callback_query: callback_query.data == "name")
async def no(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏ –ò–º—è")
    await state.set_state(Change.Namenew)

@dp.message(Change.Namenew)
async def getnewname(message: Message,state: FSMContext):
    data = load_data()
    newname = message.text
    data[str(message.from_user.id)]['name'] = newname
    save_data(data)
    await message.answer_photo(data[str(message.from_user.id)]["avatar_id" ])
    await message.answer(f"""–ü—Ä–æ—Ñ–∏–ª—å

<b>–ò–º—è</b>: {data[str(message.from_user.id)]["name"]}
<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>: {data[str(message.from_user.id)]["phone_number"]}
""",parse_mode="HTML")
    await message.answer("–í—Å–µ –≤–µ—Ä–Ω–æ?",reply_markup=buttons.vseverno)
    await state.clear()

#Callback Number 
@dp.callback_query(lambda callback_query: callback_query.data == "number")
async def no(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä")
    await state.set_state(Change.Numbernew)

@dp.message(Change.Numbernew)
async def getnewname(message: Message,state: FSMContext):
    data = load_data()
    newnumber = message.text
    data[str(message.from_user.id)]['phone_number'] = newnumber
    save_data(data)
    await message.answer_photo(data[str(message.from_user.id)]["avatar_id" ])
    await message.answer(f"""–ü—Ä–æ—Ñ–∏–ª—å

<b>–ò–º—è</b>: {data[str(message.from_user.id)]["name"]}
<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>: {data[str(message.from_user.id)]["phone_number"]}
""",parse_mode="HTML")
    await message.answer("–í—Å–µ –≤–µ—Ä–Ω–æ?",reply_markup=buttons.vseverno)
    await state.clear()
    


#Callback Avatar
@dp.callback_query(lambda callback_query: callback_query.data == "avatarid")
async def no(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–∫—É")
    await state.set_state(Change.Avatarnew)

@dp.message(Change.Avatarnew, F.photo)
async def getnewname(message: Message,state: FSMContext):
    data = load_data()
    newavatar = message.photo[-1].file_id
    data[str(message.from_user.id)]['avatar_id'] = newavatar
    save_data(data)
    await message.answer_photo(data[str(message.from_user.id)]["avatar_id" ])
    await message.answer(f"""–ü—Ä–æ—Ñ–∏–ª—å

<b>–ò–º—è</b>: {data[str(message.from_user.id)]["name"]}
<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>: {data[str(message.from_user.id)]["phone_number"]}
""",parse_mode="HTML")
    await message.answer("–í—Å–µ –≤–µ—Ä–Ω–æ?",reply_markup=buttons.vseverno)
    await state.clear()
#callbacks PROFILE DA DA DA DA DA DA DA DA DA DA DA DA DA 
@dp.callback_query(lambda callback_query: callback_query.data == "yes")
async def yes(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–û—Ç–ª–∏—á–Ω–æ!")

#callbacks NEW YORK
@dp.callback_query(lambda callback_query: callback_query.data == "ny")
async def ny(callback: CallbackQuery, state: FSMContext):
    data = load_data()
    if str(callback.from_user.id) in data:
        await callback.message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
    else:
        await callback.message.answer("NEW YORK, –æ—Ç–ª–∏—á–Ω–æ!")
        await callback.message.answer("–° –≥–æ—Ä–æ–¥–æ–º —Ä–∞–∑–æ–±—Ä–∞–ª–∏—Å—å, —Ç–µ–ø–µ—Ä—å –ø–æ–¥—Å–∫–∞–∂–∏, –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
        await state.set_state(Newmember.Name)

@dp.message(Newmember.Name)
async def getname(message: Message , state: FSMContext):
    await state.update_data(Name=message.text)
    await state.set_state(Newmember.Number)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞!")

@dp.message(Newmember.Number)
async def getnum(message: Message, state: FSMContext):
    await state.update_data(Number=message.text)
    await state.set_state(Newmember.Avatar)
    await message.answer("–û—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∞—à—É –∞–≤–∞—Ç–∞—Ä–∫—É.–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –∞–≤–∞—Ç–∞—Ä.")

@dp.message(Newmember.Avatar , F.photo)
async def getavatar(message: Message, state: FSMContext):
    user_id = message.from_user.id
    avatar_id = message.photo[-1].file_id
    data = await state.get_data()
    name = data["Name"]
    await state.clear()
    await message.answer("""–û—Ç–ª–∏—á–Ω–æ, –≤ —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ üî•üî•üî•\n–í—ã–±–µ—Ä–∏ –≤ –º–µ–Ω—é –ø—É–Ω–∫—Ç "–ê—Ñ–∏—à–∏" —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã""")
    data1 = load_data()

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ —Å–ª–æ–≤–∞—Ä—å –¥–∞–Ω–Ω—ã—Ö
    data1[str(user_id)] = {
        "name": str(name),
        "phone_number": data["Number"],
        "avatar_id": avatar_id
    }

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª
    save_data(data1)

    
    














async def main() -> None:
    
    # Initialize Bot instance with a default parse mode which will be passed to all API calls
    
    # And the run events dispatching
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())
